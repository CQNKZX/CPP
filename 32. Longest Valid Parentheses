class Solution {
public:
    int longestValidParentheses(string s) {
        int n = s.size();
        if(n < 2) return 0;
        
        stack<int> sk{};
        int start{0}, out{0}, temp{0};
        for(int i = 0; i < n; ++i){
            if(s[i] == '(') sk.push(i);
            else{
                if(sk.empty()) start = i+1;
                else{
                    sk.pop();
                    temp = (sk.empty()) ? (i - start + 1):(i - sk.top());
                    out = (temp > out)?temp:out;
                }
            }
        }
        return out;
    }
};
