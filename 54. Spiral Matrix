class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> out{};
        // trivial case
        int m = matrix.size();
        if (m < 1) return out;
        int n = matrix[0].size();
        if (n < 1) return out;
        // real work
        int flag{0}; // mode 4 flag that determines direction.
        int count{0}; // count the number of elements scanned;
        int l{0}, r = n; // left, right
        int t{0}, b = m; // top, bottom
        // start iteration, going clockwise
        while (count < m*n){
            if(flag == 0){
                for(int i = l; i < r; ++i){out.push_back(matrix[t][i]); ++count;}
                ++t;
            }
            else if(flag == 1){
                for(int i = t; i < b; ++i){out.push_back(matrix[i][r-1]); ++count;}
                --r;
            }
            else if(flag == 2){
                for(int i = r-1; i >= l; --i){ out.push_back(matrix[b-1][i]); ++count;}
                --b;
            }
            else{
                for(int i = b-1; i >= t; --i){out.push_back(matrix[i][l]); ++count;}
                ++l;
            }
            flag = (++flag) % 4;
        }
        return out;
    }
};
